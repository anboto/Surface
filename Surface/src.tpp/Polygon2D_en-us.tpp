topic "";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,2#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_} 
[ {{10000@(113.42.0) [s0;%% [*@7;4 Polygon2D]]}}&]
[s0; &]
[s0; Functions for 2D Pointf concave and convex polygons. No specific 
order is required.&]
[s0; &]
[ {{10000F(128)G(128)@1 [s0;%% [* Function List]]}}&]
[s4; &]
[s5;:Upp`:`:ContainsPoint`(const Vector`&`,const Upp`:`:Pointf`&`): [@(0.0.255) enum] 
ContainsPointRes [* ContainsPoint]([@(0.0.255) const] Vector<Pointf>[@(0.0.255) `&] 
[*@3 polygon], [@(0.0.255) const] Pointf[@(0.0.255) `&] [*@3 pt])&]
[s2;%% Checks if point [%-*@3 pt] is inside or in the boundaries of 
polygon [%-*@3 polygon].&]
[s2; [%% Returned ]ContainsPointRes is:&]
[s2;i150;O0; >0 if [*@3 pt] is inside&]
[s2;i150;O0; `=`= 0 if [*@3 pt] is in the boundary.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:PointInPoly`(const UVector`&`,const Upp`:`:Pointf`&`): [@(0.0.255) bool] 
[* PointInPoly]([@(0.0.255) const] Vector<Pointf>[@(0.0.255) `&] [*@3 xy], 
[@(0.0.255) const] Pointf[@(0.0.255) `&] [*@3 pxy])&]
[s2;%% Checks if point [%-*@3 pxy] is inside the polygon [%-*@3 xy].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:IsClockwise`(const UVector`&`): [@(0.0.255) bool] [* IsClockwise]([@(0.0.255) c
onst] Vector<Pointf>[@(0.0.255) `&] [*@3 p])&]
[s2;%% Returns if polygon [%-*@3 p] is clockwise.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Area`(const UVector`&`): [@(0.0.255) double] [* Area]([@(0.0.255) const] 
Vector<Pointf>[@(0.0.255) `&] [*@3 p])&]
[s2;%% Returns the area of polygon [%-*@3 p].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Centroid`(const UVector`&`): Pointf [* Centroid]([@(0.0.255) const] 
Vector<Pointf>[@(0.0.255) `&] [*@3 p])&]
[s2;%% Returns the centroid of polygon [%-*@3 p].&]
[s4; &]
[s5;:Upp`:`:Angle`(const Pointf`&`,const Pointf`&`): [@(0.0.255) double] 
[* Angle]([@(0.0.255) const] Pointf[@(0.0.255) `&] [*@3 a], [@(0.0.255) const] 
Pointf[@(0.0.255) `&] [*@3 b])&]
[s2;%% Returns the angle between two segments [%-*@3 a] and [%-*@3 b].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:AngleNormal`(const Pointf`&`,const Pointf`&`): [@(0.0.255) double] 
[* AngleNormal]([@(0.0.255) const] Pointf[@(0.0.255) `&] [*@3 a], [@(0.0.255) const] 
Pointf[@(0.0.255) `&] [*@3 b])&]
[s2;%% Returns the angle between two normalized segments [%-*@3 a] 
and [%-*@3 b].&]
[s3; &]
[s3;%% ]]